import streamlit as st

from pages.Machine_learning.cluster import introduction


# Cr√©er des onglets
tab1, tab2 = st.tabs(["Introduction", "Cluster"])

# Onglet Introduction
with tab1:
    # Titre principal
    st.title("Introduction au Machine Learning")

    # Introduction
    st.markdown(
        """
        Le **Machine Learning**, ou **apprentissage automatique**, est un sous-domaine de l‚Äô**intelligence artificielle** qui repose sur des approches **math√©matiques et statistiques**. 
        Son objectif est de permettre aux ordinateurs **d‚Äôapprendre √† partir des donn√©es** afin d‚Äôex√©cuter des t√¢ches sans √™tre explicitement programm√©s.\n
        Le Machine Learning est utilis√© dans de nombreux domaines, tels que la reconnaissance d‚Äôimages, le traitement du langage naturel, 
        les syst√®mes de recommandation ou encore la d√©tection de fraudes.
        """
    )

    # Section : Principaux probl√®mes du Machine Learning
    st.header("Les principaux probl√®mes du Machine Learning")

    st.markdown("Il existe plusieurs approches d'apprentissage en Machine Learning :")

    problems = {
        "Classification": "Attribuer une cat√©gorie √† une donn√©e en fonction de ses caract√©ristiques. Exemples : "
                          "classer des e-mails en spam ou non-spam, reconna√Ætre des chiffres manuscrits, "
                          "d√©tecter des avis positifs ou n√©gatifs sur un produit.",
        
        "R√©gression": "Pr√©dire une valeur num√©rique continue √† partir de donn√©es d‚Äôentr√©e. Exemples : "
                      "estimer le prix d‚Äôun bien immobilier en fonction de sa surface et de sa localisation, "
                      "pr√©dire la consommation d‚Äô√©nergie d‚Äôun b√¢timent en fonction de la temp√©rature ext√©rieure.",
        
        "Clustering": "Regrouper des donn√©es similaires sans √©tiquettes pr√©alablement d√©finies. Exemples : "
                      "segmenter des clients en fonction de leur comportement d‚Äôachat, regrouper des documents "
                      "par th√©matique, identifier des communaut√©s sur un r√©seau social.",
        
        "S√©ries temporelles": "Analyser des donn√©es qui √©voluent dans le temps et pr√©voir leurs valeurs futures. "
                              "Exemples : pr√©dictions m√©t√©orologiques, estimation du trafic routier, "
                              "pr√©visions de ventes pour un produit.",
        
        "R√©duction de dimension": "Simplifier un jeu de donn√©es tout en conservant l‚Äôessentiel des informations. "
                                  "Exemples : compresser des images tout en maintenant leur qualit√©, "
                                  "visualiser en 2D des donn√©es ayant de nombreuses variables, "
                                  "r√©duire le nombre de caract√©ristiques d‚Äôun mod√®le d‚Äôapprentissage."
    }

    for key, value in problems.items():
        st.markdown(f"- **{key}** : {value}")

    # Section : Diff√©rentes approches d‚Äôapprentissage
    st.header("Les diff√©rentes approches d‚Äôapprentissage")

    st.markdown("Le Machine Learning permet de r√©pondre √† plusieurs types de probl√®mes :")

    approaches = [
        {
            "title": "Apprentissage supervis√©",
            "description": "L‚Äôalgorithme apprend √† partir de donn√©es √©tiquet√©es, c‚Äôest-√†-dire des exemples pour lesquels la sortie correcte est connue.",
            "example": "Pr√©dire si un patient est malade ou non √† partir de ses sympt√¥mes.",
            "color": "#2A9D8F"
        },
        {
            "title": "Apprentissage non supervis√©",
            "description": "L‚Äôalgorithme est entra√Æn√© sur des donn√©es non √©tiquet√©es et doit identifier des structures sous-jacentes dans celles-ci.",
            "example": "Regrouper des clients ayant des comportements d‚Äôachat similaires.",
            "color": "#E76F51"
        },
        {
            "title": "Apprentissage semi-supervis√©",
            "description": "Ce type d‚Äôapprentissage combine donn√©es √©tiquet√©es et non √©tiquet√©es pour am√©liorer la performance tout en r√©duisant le co√ªt d‚Äôannotation.",
            "example": "Entra√Æner un mod√®le de reconnaissance faciale avec un faible nombre de visages identifi√©s.",
            "color": "#F4A261"
        },
        {
            "title": "Apprentissage auto-supervis√©",
            "description": "L‚Äôalgorithme g√©n√®re lui-m√™me des √©tiquettes √† partir des donn√©es brutes et apprend sans supervision humaine.",
            "example": "Un mod√®le entra√Æn√© √† pr√©dire des mots manquants dans une phrase.",
            "color": "#264653"
        }
    ]

    cols = st.columns(len(approaches))
    for i, col in enumerate(cols):
        with col:
            st.markdown(
                f"""
                <div style="background-color: {approaches[i]['color']}; color: white; padding: 15px; border-radius: 10px; text-align: center; height: 300px; align-items: center; justify-content: center; display: flex; flex-direction: column;">
                    <p style="font-size: 1.2em; font-weight: bold;">{approaches[i]['title']}</p>
                    <p style="font-size: 0.9em;">{approaches[i]['description']}</p>
                    <p style="font-style: italic;">{approaches[i]['example']}</p>
                </div>
                """,
                unsafe_allow_html=True
            )

    # Section : Types de donn√©es en Machine Learning
    st.header("üìÇ Types de donn√©es utilis√©es en Machine Learning")

    data_types = [
        "Vecteurs de caract√©ristiques : repr√©sentations num√©riques des donn√©es sous forme de variables.",
        "Graphes : structures relationnelles utilis√©es en analyse de r√©seaux sociaux ou en cybers√©curit√©.",
        "Arbres : mod√®les hi√©rarchiques utilis√©s pour la prise de d√©cision (ex. : arbres de d√©cision).",
        "S√©ries temporelles : donn√©es √©voluant dans le temps, utilis√©es en finance ou en m√©t√©orologie."
    ]

    for item in data_types:
        st.markdown(f"- {item}")

# Onglet Cluster.py
with tab2:
    try:
        introduction.cluster_intro()
    except FileNotFoundError:
        st.error("Le fichier cluster.py est introuvable.")
